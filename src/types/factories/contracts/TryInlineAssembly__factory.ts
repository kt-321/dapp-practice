/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

import type { PromiseOrValue } from "../../common";
import type { TryInlineAssembly, TryInlineAssemblyInterface } from "../../contracts/TryInlineAssembly";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "addition",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "useMemory",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "useStorage1",
    outputs: [
      {
        internalType: "uint256",
        name: "v1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "v2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "v3",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "useStorage2",
    outputs: [
      {
        internalType: "uint256",
        name: "v1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "v2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "v3",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061031c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806340d6f1e11461005157806354f363a3146100715780635d716270146100a1578063a8b7631b146100c1575b600080fd5b6100596100f1565b604051610068939291906101c7565b60405180910390f35b61008b6004803603810190610086919061022f565b610119565b604051610098919061026f565b60405180910390f35b6100a9610128565b6040516100b8939291906101c7565b60405180910390f35b6100db60048036038101906100d6919061028a565b61014f565b6040516100e8919061026f565b60405180910390f35b600080600060646000556000549250600a600055600054915060c86000556000549050909192565b60008183018060005260206000f35b60008060006064600055600054925060008055600054915060c86000556000549050909192565b6000808267ffffffffffffffff81111561016c5761016b6102b7565b5b60405190808252806020026020018201604052801561019a5781602001602082028036833780820191505090505b509050600060405190508092505050919050565b6000819050919050565b6101c1816101ae565b82525050565b60006060820190506101dc60008301866101b8565b6101e960208301856101b8565b6101f660408301846101b8565b949350505050565b600080fd5b61020c816101ae565b811461021757600080fd5b50565b60008135905061022981610203565b92915050565b60008060408385031215610246576102456101fe565b5b60006102548582860161021a565b92505060206102658582860161021a565b9150509250929050565b600060208201905061028460008301846101b8565b92915050565b6000602082840312156102a05761029f6101fe565b5b60006102ae8482850161021a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122093e1ac079eea7cf5f27beb7efc4768495fed6f32496fb6672d6e53c1114cfdb664736f6c63430008110033";

type TryInlineAssemblyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: TryInlineAssemblyConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class TryInlineAssembly__factory extends ContractFactory {
  constructor(...args: TryInlineAssemblyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<TryInlineAssembly> {
    return super.deploy(overrides || {}) as Promise<TryInlineAssembly>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TryInlineAssembly {
    return super.attach(address) as TryInlineAssembly;
  }
  override connect(signer: Signer): TryInlineAssembly__factory {
    return super.connect(signer) as TryInlineAssembly__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TryInlineAssemblyInterface {
    return new utils.Interface(_abi) as TryInlineAssemblyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TryInlineAssembly {
    return new Contract(address, _abi, signerOrProvider) as TryInlineAssembly;
  }
}
